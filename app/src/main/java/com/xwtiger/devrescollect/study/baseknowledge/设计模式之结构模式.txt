1，设计模式之Facade(外观)[fə'sɑːd]
   定义: 为子系统中的一组接口提供一个一致的界面.
2，设计模式之Proxy(代理)
   定义:为其他对象提供一种代理以控制对这个对象的访问
3，设计模式之Adapter(适配器)
   定义:将两个不兼容的类纠合在一起使用，属于结构型模式,需要有Adaptee(被适配者)和Adaptor(适配器)两个身份.
4，设计模式之Composite(组合) ['kɒmpəzɪt]
   定义:将对象以树形结构组织起来,以达成“部分－整体” 的层次结构，使得客户端对单个对象和组合对象的使用具有一致性
   
5，设计模式之Decorator(油漆工)['dekəreɪtə]
   定义:动态给一个对象添加一些额外的职责,就象在墙上刷油漆.使用Decorator模式相比用生成子类方式达到功能的扩充显得更为灵活  
6，设计模式之Bridge [brɪdʒ]
   定义 :将抽象和行为划分开来,各自独立,但能动态的结合
7，设计模式之Flyweight(享元)
   定义:避免大量拥有相同内容的小类的开销(如耗费内存),使大家共享一个类(元类).

