内存泄露是指程序中间动态分配了内存，但在程序结束时没有释放这部分内存，从而造成那部分内存不可用的情况，
重启计算机可以解决，但也有可能再次发生内存泄露，内存泄露和硬件没有关系，它是由软件设计缺陷引起的。
内存泄漏可以分为4类：
1) 常发性内存泄漏。发生内存泄漏的代码会被多次执行到，每次被执行的时候都会导致一块内存泄漏。
2) 偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的。
对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。
3) 一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总会有一块仅且
一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，
所以内存泄漏只会发生一次。
4) 隐式内存泄漏。程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存。
严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。
但是对于一个服务器程序，需要运行几天，几周甚至几个月，
不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。
内存溢出类型：
1) java.lang.OutOfMemoryError: PermGen space
PermGen space 的全称是 Permanent Generation space, 是指内存的永久保存区域。
这块内存主要是被JVM存放Class和Meta信息的，Class在被Loader时就会被放到PermGenspace中，
它和存放类实例(Instance)的Heap区域不同，GC不会在主程序运行期对PermGen space进行清理。

内存泄漏的demo:
Java中也存在内存泄露。当被分配的对象可达但已无用（未对作废数据内存单元的引用置null）即会引起。
         如：
Java代码
Vector v=new Vector(10);
for (int i=1;i<100; i ) {
    Object o=new Object();
    v.add(o);
    o=null;
}
// 此时，所有的Object对象都没有被释放，因为变量v引用这些对象。
// 对象加入到Vector后，还必须从Vector中删除，最简单释放方法就是将Vector对象设置为null。
