1，设计模式之Template ['templeɪt; -plɪt]
   定义:定义一个操作中算法的骨架,将一些步骤的执行延迟到其子类中
2，设计模式之Memento(备忘机制)[məˈmentəʊ]   
   定义:memento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态.
3，设计模式之Observer

4，设计模式之Chain of Responsibility(职责链)  
   定义：Chain of Responsibility(CoR) 是用一系列类(classes)试图处理一个请求request,
   这些类之间是一个松散的耦合,唯一共同点是在他们之间传递request. 
   也就是说，来了一个请求，A类先处理，如果没有处理，就传递到B类处理，如果没有处理，
   就传递到C类处理，就这样象一个链条(chain)一样传递下去
5，设计模式之Command
   定义：不少Command模式的代码都是针对图形界面的,
   它实际就是菜单命令,我们在一个下拉菜单选择一个命令时,然后会执行一些动作
6，设计模式之State
   定义: 不同的状态,不同的行为;或者说,每个状态有着相应的行为
7，设计模式之Strategy(策略)['strætɪdʒɪ]
   主要是定义一系列的算法,把这些算法一个个封装成单独的类
8，设计模式之Mediator(中介者)['miːdɪeɪtə]
   定义:用一个中介对象来封装一系列关于对象交互行为.
9,设计模式之Interpreter(解释器)[ɪn'tɜːprɪtə]
  定义语言的文法 ,并且建立一个解释器来解释该语言中的句子
10,设计模式之Visitor ['vɪzɪtə]
  定义:作用于某个对象群中各个对象的操作. 它可以使你在不改变这些对象本身的情况下,定义作用于这些对象的新操作